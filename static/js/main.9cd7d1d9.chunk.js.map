{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","marked","require","setOptions","gfm","breaks","defaultText","state","input","output","handleEditorChange","bind","handleClearClick","event","this","setState","target","value","className","htmlFor","id","type","onChange","name","cols","rows","placeholder","onClick","dangerouslySetInnerHTML","__html","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+PA0GeA,G,wDArGb,WAAYC,GAAQ,IAAD,sBACjB,IAAMC,EAASC,EAAQ,GACvBD,EAAOE,WAAW,CAChBC,KAAK,EACLC,QAAQ,IAGV,IAAMC,EACJ,0xBARe,OAMjB,cAAMN,IAsBDO,MAAQ,CACXC,MAAOF,EACPG,OAAQR,EAAOK,IAGjB,EAAKI,mBAAqB,EAAKA,mBAAmBC,KAAxB,gBAC1B,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBAlCP,E,+DAsCAE,GACjB,IAAMZ,EAASC,EAAQ,GACvBD,EAAOE,WAAW,CAChBE,QAAQ,EACRD,KAAK,IAEPU,KAAKC,SAAS,CACZP,MAAOK,EAAMG,OAAOC,MACpBR,OAAQR,EAAOY,EAAMG,OAAOC,W,uCAKfJ,GACfC,KAAKC,SAAS,CACZP,MAAOM,KAAKR,gB,+BAOd,OACE,yBAAKY,UAAU,OACb,4BAAQA,UAAU,cAChB,uDAKF,6BAASA,UAAU,WAEnB,0BAAMA,UAAU,SACd,2BAAOC,QAAQ,eAAf,mCACE,8BAAUC,GAAG,SACHC,KAAK,OACLJ,MAAOH,KAAKP,MAAMC,MAClBc,SAAUR,KAAKJ,mBACfa,KAAK,cACLC,KAAK,KACLC,KAAK,KACLC,YAAaZ,KAAKP,MAAME,SAElC,4BAAQY,KAAK,QACNJ,MAAM,QACNC,UAAU,cACVS,QAASb,KAAKF,kBAHrB,UAMF,yBAAKM,UAAU,UACb,2BAAOC,QAAQ,gBAAf,yBACA,yBAAKC,GAAG,UACHQ,wBAAyB,CAACC,OAAQf,KAAKP,MAAME,iB,GA5F5CqB,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9cd7d1d9.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    const marked = require('marked');\n    marked.setOptions({\n      gfm: true,\n      breaks: true,\n    })\n    super(props);\n    const defaultText = (\n      \"An H1 Header\\r====================\\r\" +\n      \"# This is also an H1\\r\" +\n      \"An H2 Header\\r---------------------\\r\" +\n      \"## This is also an H2\\r\" +\n      \"\\r\" +\n      \"A regular paragraph without styling.\\r\" +\n      \"### An H3 Header\\r\\r\" +\n      \"> This is the first level of quoting.\\r>\\r>> This is nested blockquote.\\r>\\r> Back to the first level.\\r\\r\" +\n      \"How to format **bold** words.\\r\" +\n      \"Another way to _emphasize_.\\r\" +\n      \"*   An.\\r*   Unordered.\\r*   List.\\r\\r\" +\n      \"1. An.\\r2. Ordered.\\r3. List.\\r\\r\" +\n      \"This is [an example](http://example.com/ \\\"Title\\\") inline link.\\r\\r\" + //I think this fixes the <a> problem\n      \"Use the `printf()` function.\\r\\r\" + //I think this solves the <code> questions\n      \"Now for some multi line coding: \\r\" +\n      \"```\\rfunction anotherExample(firstLine, lastLine) {\\rif (firstLine == '```' && lastLine == '```') {\\rreturn multiLineCode;\\r}\\r}\\r```\\r\" +\n      \"`const marked=require('marked'); input: this.defaultText; `\\r\\r\" +\n      \"![react photo](/react.jpg \\\"React Photo\\\")\\r\"\n    )\n\n    this.state = {\n      input: defaultText,\n      output: marked(defaultText),\n    }\n\n    this.handleEditorChange = this.handleEditorChange.bind(this);\n    this.handleClearClick = this.handleClearClick.bind(this);\n\n  }\n\n  handleEditorChange(event) {\n    const marked = require('marked');\n    marked.setOptions({\n      breaks: true,\n      gfm: true\n    })\n    this.setState({\n      input: event.target.value,\n      output: marked(event.target.value),\n    });\n  }\n\n\n  handleClearClick(event){\n    this.setState({\n      input: this.defaultText,\n    })\n  }\n\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>\n            Turn Markdown into HTML\n          </p>\n        </header>\n\n        <section className=\"display\">\n\n        <form className=\"input\">\n          <label htmlFor=\"text-editor\">Preview Your Own Markdown Text!</label>\n            <textarea id=\"editor\"\n                      type=\"text\"\n                      value={this.state.input}\n                      onChange={this.handleEditorChange}\n                      name=\"text-editor\"\n                      cols=\"40\"\n                      rows=\"80\"\n                      placeholder={this.state.output}>\n            </textarea>\n            <button type=\"clear\"\n                   value=\"clear\"\n                   className=\"clearButton\"\n                   onClick={this.handleClearClick}>Clear</button>\n          </form>\n\n          <div className=\"output\">\n            <label htmlFor=\"text-preview\">Translated into HTML:</label>\n            <div id=\"preview\"\n                 dangerouslySetInnerHTML={{__html: this.state.output}} />\n          </div>\n\n        </section>\n\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}